
# forward or adjoint simulation
SIMULATION_TYPE                 = {SIMULATION_TYPE}
NOISE_TOMOGRAPHY                = {NOISE_TOMOGRAPHY}        # flag of noise tomography, three steps (1,2,3). If earthquake simulation, set it to 0.
SAVE_FORWARD                    = {SAVE_FORWARD}  # save last frame of forward simulation or not

# number of chunks (1,2,3 or 6)
NCHUNKS                         = {NCHUNKS}

# angular width of the first chunk (not used if full sphere with six chunks)
ANGULAR_WIDTH_XI_IN_DEGREES   = {ANGULAR_WIDTH_XI_IN_DEGREES}      # angular size of a chunk
ANGULAR_WIDTH_ETA_IN_DEGREES  = {ANGULAR_WIDTH_ETA_IN_DEGREES}
CENTER_LATITUDE_IN_DEGREES    = {CENTER_LATITUDE_IN_DEGREES}
CENTER_LONGITUDE_IN_DEGREES   = {CENTER_LONGITUDE_IN_DEGREES}
GAMMA_ROTATION_AZIMUTH        = {GAMMA_ROTATION_AZIMUTH}

# number of elements at the surface along the two sides of the first chunk
# (must be multiple of 16 and 8 * multiple of NPROC below)
NEX_XI                          = {NEX_XI}
NEX_ETA                         = {NEX_ETA}

# number of MPI processors along the two sides of the first chunk
NPROC_XI                        = {NPROC_XI}
NPROC_ETA                       = {NPROC_ETA}

# 1D models with real structure:
# 1D_isotropic_prem, 1D_transversely_isotropic_prem, 1D_iasp91, 1D_1066a, 1D_ak135f_no_mud, 1D_ref, 1D_ref_iso, 1D_jp3d,1D_sea99
#
# 1D models with only one fictitious averaged crustal layer:
# 1D_isotropic_prem_onecrust, 1D_transversely_isotropic_prem_onecrust, 1D_iasp91_onecrust, 1D_1066a_onecrust, 1D_ak135f_no_mud_onecrust
#
# fully 3D models:
# transversely_isotropic_prem_plus_3D_crust_2.0, 3D_anisotropic, 3D_attenuation,
# s20rts, s40rts, s362ani, s362iso, s362wmani, s362ani_prem, s362ani_3DQ, s362iso_3DQ,
# s29ea, s29ea,sea99_jp3d1994,sea99,jp3d1994,heterogen
#
# 3D models with 1D crust: append "_1Dcrust" the the 3D model name
#                          to take the 1D crustal model from the
#                          associated reference model rather than the default 3D crustal model
# e.g. s20rts_1Dcrust, s362ani_1Dcrust, etc.
MODEL                           = {MODEL}

# parameters describing the Earth model
OCEANS                          = {OCEANS}
ELLIPTICITY                     = {ELLIPTICITY}
TOPOGRAPHY                      = {TOPOGRAPHY}
GRAVITY                         = {GRAVITY}
ROTATION                        = {ROTATION}
ATTENUATION                     = {ATTENUATION}

# absorbing boundary conditions for a regional simulation
ABSORBING_CONDITIONS            = {ABSORBING_CONDITIONS}

# record length in minutes
RECORD_LENGTH_IN_MINUTES        = {RECORD_LENGTH_IN_MINUTES}

# to undo attenuation for sensitivity kernel calculations or forward runs with SAVE_FORWARD
# use one (and only one) of the two flags below. UNDO_ATTENUATION is much better (it is exact)
# but requires a significant amount of disk space for temporary storage.
ATTENUATION_1D_WITH_3D_STORAGE  = {ATTENUATION_1D_WITH_3D_STORAGE}
PARTIAL_PHYS_DISPERSION_ONLY    = {PARTIAL_PHYS_DISPERSION_ONLY}
UNDO_ATTENUATION                = {UNDO_ATTENUATION}
NT_DUMP_ATTENUATION             = {NT_DUMP_ATTENUATION}   # how often we dump restart files to undo attenuation, only needed when using UNDO_ATTENUATION

# three mass matrices instead of one are needed to handle rotation very accurately;
# otherwise rotation is handled slightly less accurately (but still reasonably well);
# set to .true. if you are interested in precise effects related to rotation;
# set to .false. if you are solving very large inverse problems at high frequency and also undoing attenuation exactly
# using the UNDO_ATTENUATION flag above, in which case saving as much memory as possible can be a good idea.
# You can also safely set it to .false. if you are not in a period range in which rotation matters, e.g. if you are targetting very short-period body waves.
# if in doubt, set to .true.
# Set it to .true. if you have ABSORBING_CONDITIONS above, because in that case the code will use the three mass matrices anyway
# and thus there is no additional cost.
# this flag is of course unused if ROTATION above is set to .false.
EXACT_MASS_MATRIX_FOR_ROTATION  = {EXACT_MASS_MATRIX_FOR_ROTATION}

# this for LDDRK high-order time scheme instead of Newmark
USE_LDDRK                       = {USE_LDDRK}

# the maximum CFL of LDDRK is significantly higher than that of the Newmark scheme,
# in a ratio that is theoretically 1.327 / 0.697 = 1.15 / 0.604 = 1.903 for a solid with Poisson's ratio = 0.25
# and for a fluid (see the manual of the 2D code, SPECFEM2D, Tables 4.1 and 4.2, and that ratio does not
# depend on whether we are in 2D or in 3D). However in practice a ratio of about 1.5 to 1.7 is often safer
# (for instance for models with a large range of Poisson's ratio values).
# Since the code computes the time step using the Newmark scheme, for LDDRK we will simply
# multiply that time step by this ratio when LDDRK is on and when flag INCREASE_CFL_FOR_LDDRK is true.
INCREASE_CFL_FOR_LDDRK          = {INCREASE_CFL_FOR_LDDRK}
RATIO_BY_WHICH_TO_INCREASE_IT   = {RATIO_BY_WHICH_TO_INCREASE_IT}

# save AVS or OpenDX movies
#MOVIE_COARSE saves movie only at corners of elements (SURFACE OR VOLUME)
#MOVIE_COARSE does not work with create_movie_AVS_DX
MOVIE_SURFACE                   = {MOVIE_SURFACE}
MOVIE_VOLUME                    = {MOVIE_VOLUME}
MOVIE_COARSE                    = {MOVIE_COARSE}
NTSTEP_BETWEEN_FRAMES           = {NTSTEP_BETWEEN_FRAMES}
HDUR_MOVIE                      = {HDUR_MOVIE}

# save movie in volume.  Will save element if center of element is in prescribed volume
# top/bottom: depth in KM, use MOVIE_TOP = -100 to make sure the surface is stored.
# west/east: longitude, degrees East [-180/180] top/bottom: latitute, degrees North [-90/90]
# start/stop: frames will be stored at MOVIE_START + i*NSTEP_BETWEEN_FRAMES, where i=(0,1,2..) and iNSTEP_BETWEEN_FRAMES <= MOVIE_STOP
# movie_volume_type: 1=strain, 2=time integral of strain, 3=\mu*time integral of strain
# type 4 saves the trace and deviatoric stress in the whole volume, 5=displacement, 6=velocity
MOVIE_VOLUME_TYPE               = {MOVIE_VOLUME_TYPE}
MOVIE_TOP_KM                    = {MOVIE_TOP_KM}
MOVIE_BOTTOM_KM                 = {MOVIE_BOTTOM_KM}
MOVIE_WEST_DEG                  = {MOVIE_WEST_DEG}
MOVIE_EAST_DEG                  = {MOVIE_EAST_DEG}
MOVIE_NORTH_DEG                 = {MOVIE_NORTH_DEG}
MOVIE_SOUTH_DEG                 = {MOVIE_SOUTH_DEG}
MOVIE_START                     = {MOVIE_START}
MOVIE_STOP                      = {MOVIE_STOP}

# save mesh files to check the mesh
SAVE_MESH_FILES                 = {SAVE_MESH_FILES}

# restart files (number of runs can be 1 or higher, choose 1 for no restart files)
NUMBER_OF_RUNS                  = {NUMBER_OF_RUNS}
NUMBER_OF_THIS_RUN              = {NUMBER_OF_THIS_RUN}

# path to store the local database files on each node
LOCAL_PATH                      = {LOCAL_PATH}
# temporary wavefield/kernel/movie files
LOCAL_TMP_PATH                  = {LOCAL_TMP_PATH}

# interval at which we output time step info and max of norm of displacement
NTSTEP_BETWEEN_OUTPUT_INFO      = {NTSTEP_BETWEEN_OUTPUT_INFO}

# interval in time steps for temporary writing of seismograms
NTSTEP_BETWEEN_OUTPUT_SEISMOS   = {NTSTEP_BETWEEN_OUTPUT_SEISMOS}
NTSTEP_BETWEEN_READ_ADJSRC      = {NTSTEP_BETWEEN_READ_ADJSRC}

# output format for the seismograms (one can use either or all of the three formats)
OUTPUT_SEISMOS_ASCII_TEXT       = {OUTPUT_SEISMOS_ASCII_TEXT}
OUTPUT_SEISMOS_SAC_ALPHANUM     = {OUTPUT_SEISMOS_SAC_ALPHANUM}
OUTPUT_SEISMOS_SAC_BINARY       = {OUTPUT_SEISMOS_SAC_BINARY}
OUTPUT_SEISMOS_ASDF             = {OUTPUT_SEISMOS_ASDF}

# rotate seismograms to Radial-Transverse-Z or use default North-East-Z reference frame
ROTATE_SEISMOGRAMS_RT           = {ROTATE_SEISMOGRAMS_RT}

# decide if master process writes all the seismograms or if all processes do it in parallel
WRITE_SEISMOGRAMS_BY_MASTER     = {WRITE_SEISMOGRAMS_BY_MASTER}

# save all seismograms in one large combined file instead of one file per seismogram
# to avoid overloading shared non-local file systems such as GPFS for instance
SAVE_ALL_SEISMOS_IN_ONE_FILE    = {SAVE_ALL_SEISMOS_IN_ONE_FILE}
USE_BINARY_FOR_LARGE_FILE       = {USE_BINARY_FOR_LARGE_FILE}

# flag to impose receivers at the surface or allow them to be buried
RECEIVERS_CAN_BE_BURIED         = {RECEIVERS_CAN_BE_BURIED}

# print source time function
PRINT_SOURCE_TIME_FUNCTION      = {PRINT_SOURCE_TIME_FUNCTION}

#-----------------------------------------------------------
#
#  adjoint kernel outputs
#
#-----------------------------------------------------------

# this parameter must be set to .true. to compute anisotropic kernels
# in crust and mantle (related to the 21 Cij in geographical coordinates)
# default is .false. to compute isotropic kernels (related to alpha and beta)
ANISOTROPIC_KL                  = {ANISOTROPIC_KL}

# output only transverse isotropic kernels (alpha_v,alpha_h,beta_v,beta_h,eta,rho)
# rather than fully anisotropic kernels when ANISOTROPIC_KL above is set to .true.
# means to save radial anisotropic kernels, i.e., sensitivity kernels for beta_v, beta_h, etc.
SAVE_TRANSVERSE_KL_ONLY         = {SAVE_TRANSVERSE_KL_ONLY}

# output approximate Hessian in crust mantle region.
# means to save the preconditioning for gradients, they are cross correlations between forward and adjoint accelerations.
APPROXIMATE_HESS_KL             = {APPROXIMATE_HESS_KL}

# forces transverse isotropy for all mantle elements
# (default is to use transverse isotropy only between MOHO and 220)
# means we allow radial anisotropy between the bottom of the crust to the bottom of the transition zone, i.e., 660~km depth.
USE_FULL_TISO_MANTLE            = {USE_FULL_TISO_MANTLE}

# output kernel mask to zero out source region
# to remove large values near the sources in the sensitivity kernels
SAVE_SOURCE_MASK                = {SAVE_SOURCE_MASK}

# output kernels on a regular grid instead of on the GLL mesh points (a bit expensive)
SAVE_REGULAR_KL                 = {SAVE_REGULAR_KL}

#-----------------------------------------------------------

# set to true to use GPUs
GPU_MODE                        = {GPU_MODE}

# set to true to use the ADIOS library for I/Os
ADIOS_ENABLED                   = {ADIOS_ENABLED}
ADIOS_FOR_FORWARD_ARRAYS        = {ADIOS_FOR_FORWARD_ARRAYS}
ADIOS_FOR_MPI_ARRAYS            = {ADIOS_FOR_MPI_ARRAYS}
ADIOS_FOR_ARRAYS_SOLVER         = {ADIOS_FOR_ARRAYS_SOLVER}
ADIOS_FOR_SOLVER_MESHFILES      = {ADIOS_FOR_SOLVER_MESHFILES}
ADIOS_FOR_AVS_DX                = {ADIOS_FOR_AVS_DX}
ADIOS_FOR_KERNELS               = {ADIOS_FOR_KERNELS}
ADIOS_FOR_MODELS                = {ADIOS_FOR_MODELS}

# If given, it will look for a file called "STF" in the input file directory
# and use that as a source time function.
EXTERNAL_SOURCE_TIME_FUNCTION   =  {EXTERNAL_SOURCE_TIME_FUNCTION}
